import pandas as pd
import numpy as np


"""
pandas.Series - класс с одномерным набором данных, типо столбец из какой то таблицы.
У series есть индексы и значения, которые соответсвтуют этим данным.

При пропуске каких то данных мы можем использовать np.nan, он не будет использоваться при рассчетах
различных метрик. np.nan - по умолчанию float64.


"""

some_list = [10, 1, 13, 8, np.nan, 100, 7]
# в Series все элемента списка должны быть одного типа
ser_1 = pd.Series(some_list)
print(ser_1)

print('-------------')

# можем делать индексирование более информативным, путем передачи массива с этими
# также можно передать имя этой серии
name = 'Temperatures of 7 days.'
index_list = ['1st day', '2nd day', '3th day', '4th day', '5th day', '6th day', '7th day']
ser_2 = pd.Series(some_list, index=index_list, name=name)
print(ser_2)

print('-------------')

# индексирование аналогично спискам в питоне
print(ser_2[3])
print(ser_2[2:5])
print(ser_2[::-1])

print('----------')

# можно создавать подобие масок, как в numpy
# | - или, & - и
mask_of_ser_2 = ((ser_2 >= 3) | (ser_2 % 2==0))
print(mask_of_ser_2)
print(ser_2)

# и передавать эту маску в качестве индекса для идентификации
print(ser_2[mask_of_ser_2])

print('---------------')

# еще можно сортировать серии
print(ser_2)
ser_2 = ser_2.sort_values()
print(ser_2)

print('---------------')

# можно выполнять операции, аналогичные операциям с numpy массивами, которые изменяют соотв. эл-ты
# можно использовать все ufunc функции из numpy

print(ser_2)
ser_2 = ser_2 ** 2
print(ser_2)
ser_2 = np.exp(ser_2)
print(ser_2)

print('-----------------')

# сириесы можно складывать, тогда будут складываться соотв. элементы
s1 = pd.Series([1, 2, 3, 4, 5])
s2 = pd.Series([10, 20, 30, 40, 50])
s3 = s1 + s2
print(s1, s2)
print(s3)

# можно складывать сириесы разных размеров, тогда в сириес меньшего размера будут добавлять нан
# объекты, пока не будет достигнут размер большего сириеса. nan + число = nan
s2 = pd.Series([10, 20, 30, 40, 50, 60, 70])
s3 = s1 + s2
print(s3)

print('---------------')

# аттриббут shape показывает число строк в серии
print(s1)
print(s1.shape)

print('--------------')

# dataframe - это двумерная таблица с данными. имеет индекс (имя строки) и столбцы
# столбцы могут быть разных типов
# Dataframe можно составить из словаря. Ключ будет соответсовать колонке
# ключом является серия, элементы, столбца, которых нет, но для которых индекс существует, будут нан

some_dict = {'one': pd.Series([1,2,3], index=['a','b','c']),
             'two': pd.Series([1,2,3,4], index=['a','b','c','d']),
             'three': pd.Series([5,6,7,8], index=['a','b','c','d'])}
df = pd.DataFrame(some_dict)
print(df)

print('-------------------')

#Альтернативно, из списка списков с аргументом columns
# списки, лежащие в главном списке будут строками в датафрейме
some_array = [[1,1,5], [2,2,6], [3,3,7], [np.nan, 4,8]]
df = pd.DataFrame(some_array, index=['a', 'b', 'c', 'd'], columns=['one', 'two', 'three'])
print(df)
 
print('---------------------')

# возвращает значение dataframe
print(df.values)
# возвращает список с названиями столбцов
print(df.columns)
# возвращает список с названиями строк
print(df.index)

print('--------------')

# можно менять название столбцов и строк
df.columns = ['first_column', 'second_column', 'third_column']
df.index = [1,2,3,4]
print(df)

print('--------------')

# индексировать можно по столбцам, будем получать сириес объект
print(df['first_column'])
# если название хорошее, то можно и через точку
print(df.first_column)

# можно в качестве индекса передавать и список, тогда будем получать уже dataframe объект
print(df[['first_column', 'second_column']])

print('--------------')

# можно индексировать по строкам, но нужно будет передавать срез, будут полуоткрытые интервалы
print(df[:1]) # нулевая строка
print(df[2:4]) # 2 и 3 строки (индексация же с нуля

print('--------------')

# универсальное индексирование
# сначала указывается срез строк, затем срез столбцов
print(df.iloc[1:3, :2])

print('------------------')

# можно модифицировать датафрейм, например добавить новую колонку можно

print(df)

new_column = [1, 2]
ns = pd.Series(new_column)
ns.index = df.index[:ns.shape[0]]
print(ns)

df['fourth_column'] = ns
print(df)
